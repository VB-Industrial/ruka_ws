
#ifndef RUKA_SENSOR_HPP_
#define RUKA_SENSOR_HPP_

#include <memory>
#include <string>
#include <vector>

#include "hardware_interface/handle.hpp"
#include "hardware_interface/hardware_info.hpp"
#include "hardware_interface/sensor_interface.hpp"
#include "hardware_interface/types/hardware_interface_return_values.hpp"
#include "rclcpp/macros.hpp"
#include "visibility_control.h"

namespace ruka
{
class RukaSensor : public hardware_interface::SensorInterface
{
public:
  RCLCPP_SHARED_PTR_DEFINITIONS(RukaSensor);

  RUKA_PUBLIC
  hardware_interface::CallbackReturn on_init(
    const hardware_interface::HardwareInfo & info) override;

  RUKA_PUBLIC
  std::vector<hardware_interface::StateInterface> export_state_interfaces() override;

  RUKA_PUBLIC
  hardware_interface::CallbackReturn on_activate(
    const rclcpp_lifecycle::State & previous_state) override;

  RUKA_PUBLIC
  hardware_interface::CallbackReturn on_deactivate(
    const rclcpp_lifecycle::State & previous_state) override;

  RUKA_PUBLIC
  hardware_interface::return_type read(
    const rclcpp::Time & time, const rclcpp::Duration & period) override;

private:
  // Parameters for the RRBot simulation
  double hw_start_sec_;
  double hw_stop_sec_;
  double hw_sensor_change_;

  // Store the sensor states for the simulated robot
  std::vector<double> hw_sensor_states_;
};

}  
#endif  // RUKA_SENSOR_HPP_
// #ifndef RUKA_SENSOR_HPP_
// #define RUKA_SENSOR_HPP_

// #include <memory>
// #include <string>
// #include <vector>

// #include "controller_interface/controller_interface.hpp"

// #include "visibility_control.h"
// // auto-generated by generate_parameter_library
// //#include "imu_sensor_broadcaster_parameters.hpp"
// #include "rclcpp_lifecycle/node_interfaces/lifecycle_node_interface.hpp"
// #include "rclcpp_lifecycle/state.hpp"
// #include "realtime_tools/realtime_publisher.h"
// #include "semantic_components/imu_sensor.hpp"
// #include "sensor_msgs/msg/imu.hpp"

// namespace ruka
// {
// class RukaSensor : public controller_interface::ControllerInterface
// {
// public:
//   RUKA_PUBLIC
//   controller_interface::InterfaceConfiguration command_interface_configuration() const override;

//   RUKA_PUBLIC
//   controller_interface::InterfaceConfiguration state_interface_configuration() const override;

//   RUKA_PUBLIC controller_interface::CallbackReturn on_init() override;

//   RUKA_PUBLIC
//   controller_interface::CallbackReturn on_configure(
//     const rclcpp_lifecycle::State & previous_state) override;

//   RUKA_PUBLIC
//   controller_interface::CallbackReturn on_activate(
//     const rclcpp_lifecycle::State & previous_state) override;

//   RUKA_PUBLIC
//   controller_interface::CallbackReturn on_deactivate(
//     const rclcpp_lifecycle::State & previous_state) override;

//   RUKA_PUBLIC
//   controller_interface::return_type update(
//     const rclcpp::Time & time, const rclcpp::Duration & period) override;

// protected:
//   // std::shared_ptr<ParamListener> param_listener_;
//   // Params params_;

//   std::unique_ptr<semantic_components::IMUSensor> imu_sensor_;

//   using StatePublisher = realtime_tools::RealtimePublisher<sensor_msgs::msg::Imu>;
//   rclcpp::Publisher<sensor_msgs::msg::Imu>::SharedPtr sensor_state_publisher_;
//   std::unique_ptr<StatePublisher> realtime_publisher_;
// };

// }  // namespace imu_sensor_broadcaster

// #endif  // IMU_SENSOR_BROADCASTER__IMU_SENSOR_BROADCASTER_HPP_

// #ifndef RUKA_SENSOR_HPP_
// #define RUKA_SENSOR_HPP_

// #include <memory>
// #include <string>
// #include <vector>

// #include "hardware_interface/handle.hpp"
// #include "hardware_interface/hardware_info.hpp"
// #include "hardware_interface/sensor_interface.hpp"
// #include "hardware_interface/types/hardware_interface_return_values.hpp"
// #include "rclcpp/macros.hpp"
// #include "visibility_control.h"

// namespace joint_trajectory_controller
// {
// class RukaSensor : public hardware_interface::SensorInterface
// {
// public:
//   RCLCPP_SHARED_PTR_DEFINITIONS(RukaSensor );

//   RUKA_PUBLIC
//   hardware_interface::CallbackReturn on_init(
//     const hardware_interface::HardwareInfo & info) override;

//   RUKA_PUBLIC
//   std::vector<hardware_interface::StateInterface> export_state_interfaces() override;

//   RUKA_PUBLIC
//   hardware_interface::CallbackReturn on_activate(
//     const rclcpp_lifecycle::State & previous_state) override;

//   RUKA_PUBLIC
//   hardware_interface::CallbackReturn on_deactivate(
//     const rclcpp_lifecycle::State & previous_state) override;

//   RUKA_PUBLIC
//   hardware_interface::return_type read(
//     const rclcpp::Time & time, const rclcpp::Duration & period) override;

// private:
//   // Parameters for the RRBot simulation
//   double hw_start_sec_;
//   double hw_stop_sec_;
//   double hw_sensor_change_;

//   // Store the sensor states for the simulated robot
//   std::vector<double> hw_sensor_states_;
// };

// }  // namespace ros2_control_demo_example_5

// #endif 


// #include "controller_interface/controller_interface.hpp"
// #include "visibility_control.h"
// // auto-generated by generate_parameter_library
// #include "imu_sensor_broadcaster_parameters.hpp"
// #include "rclcpp_lifecycle/node_interfaces/lifecycle_node_interface.hpp"
// #include "rclcpp_lifecycle/state.hpp"
// #include "realtime_tools/realtime_publisher.h"
// #include "semantic_components/imu_sensor.hpp"
// #include "sensor_msgs/msg/imu.hpp"

// namespace vr
// {
// class VrSensor : public controller_interface::ControllerInterface
// {
// public:
//   VR_PUBLIC
//   controller_interface::InterfaceConfiguration command_interface_configuration() const override;

//   VR_PUBLIC
//   controller_interface::InterfaceConfiguration state_interface_configuration() const override;

//   VR_PUBLIC controller_interface::CallbackReturn on_init() override;

//   VR_PUBLIC
//   controller_interface::CallbackReturn on_configure(
//     const rclcpp_lifecycle::State & previous_state) override;

//   VR_PUBLIC
//   controller_interface::CallbackReturn on_activate(
//     const rclcpp_lifecycle::State & previous_state) override;

//   VR_PUBLIC
//   controller_interface::CallbackReturn on_deactivate(
//     const rclcpp_lifecycle::State & previous_state) override;

//   VR_PUBLIC
//   controller_interface::return_type update(
//     const rclcpp::Time & time, const rclcpp::Duration & period) override;

// protected:
//   std::shared_ptr<ParamListener> param_listener_;
//   Params params_;

//   std::unique_ptr<semantic_components::IMUSensor> imu_sensor_;

//   using StatePublisher = realtime_tools::RealtimePublisher<sensor_msgs::msg::Imu>;
//   rclcpp::Publisher<sensor_msgs::msg::Imu>::SharedPtr sensor_state_publisher_;
//   std::unique_ptr<StatePublisher> realtime_publisher_;
// };

// }  // namespace imu_sensor_broadcaster

